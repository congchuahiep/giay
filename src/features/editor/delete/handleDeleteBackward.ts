import {
  Editor,
  Element,
  Node,
  Path,
  Range,
  Transforms,
  type BaseSelection,
  type NodeEntry,
} from "slate";

/**
 * X·ª≠ l√Ω vi·ªác ng∆∞·ªùi d√πng b·∫•m ph√≠m "Backspace", c·ª• th·ªÉ l√† x·ª≠ l√Ω vi·ªác ng∆∞·ªùi d√πng xo√° n·ªôi dung
 * t√†i li·ªáu. Tu·ª≥ v√†o v·ªã tr√≠ con tr·ªè th·ª±c hi·ªán v√† block hi·ªán t·∫°i ƒëang th·ª±c hi·ªán s·∫Ω th·ª±c thi
 * c√°c thao t√°c kh√°c nhau
 *
 * @param event S·ª± ki·ªán b√†n ph√≠m (KeyboardEvent) khi nh·∫•n Backspace
 * @param editor ƒê·ªëi t∆∞·ª£ng Editor c·ªßa Slate
 */

export default function handleDeleteBackward(editor: Editor): boolean {
  const { selection } = editor;

  // Early return n·∫øu kh√¥ng c√≥ selection
  if (!selection) return false;

  // X·ª≠ l√Ω selection collapsed
  return handleCollapsedSelection(editor, selection);
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán Backspace khi selection ƒëang b·ªã thu g·ªçn (collapsed):
 *
 * - N·∫øu con tr·ªè ƒëang ·ªü ƒë·∫ßu block ƒë·∫∑c bi·ªát (t·ª©c block kh√¥ng ph·∫£i paragraph), chuy·ªÉn block
 * ƒë√≥ v·ªÅ ki·ªÉu paragraph
 * - N·∫øu kh√¥ng ph·∫£i tr∆∞·ªùng h·ª£p tr√™n, th·ª±c hi·ªán merge v·ªõi block li·ªÅn tr∆∞·ªõc n·∫øu c√≥ th·ªÉ
 *
 * @param event S·ª± ki·ªán b√†n ph√≠m (KeyboardEvent) khi nh·∫•n Backspace.
 * @param editor ƒê·ªëi t∆∞·ª£ng Editor c·ªßa Slate.
 * @param selection V√πng selection hi·ªán t·∫°i (Range).
 * @param currentBlockType Ki·ªÉu block hi·ªán t·∫°i, ho·∫∑c null n·∫øu kh√¥ng x√°c ƒë·ªãnh.
 */
function handleCollapsedSelection(editor: Editor, selection: Range): boolean {
  const currentBlockType = editor.getCurrentBlockType();
  const isAtBlockStart = selection.focus.offset === 0;
  const isSpecialBlock = currentBlockType !== "paragraph";

  // Reset block ƒë·∫∑c bi·ªát th√†nh paragraph khi con tr·ªè ƒëang ·ªü ƒë·∫ßu block
  if (isSpecialBlock && isAtBlockStart) {
    Transforms.setNodes(editor, { type: "paragraph" });
    return true;
  }

  // N·∫øu con tr·ªè ƒëang ·ªü ƒë·∫ßu X·ª≠ l√Ω merge v·ªõi block tr∆∞·ªõc ƒë√≥
  return handleBackspaceMergeToPreviousBlock(editor, selection);
}

/**
 * ƒê·ªëi v·ªõi tr∆∞·ªùng h·ª£p Node b√™n tr√™n kh√¥ng c√≥ gi√° tr·ªã n√†o, m·∫∑c ƒë·ªãnh Slate s·∫Ω xo√°
 * node ƒë√≥ lu√¥n (bruh), th·∫ø n√™n ·ªü ƒë√¢y ta vi·∫øt th√™m 1 ch√∫t logic ngƒÉn ch·∫∑n vi·ªác
 * Slate t·ª± ƒë·ªông xo√° node b√™n tr√™n n·∫øu n√≥ r·ªóng
 *
 * **Tin tao ƒëi, nh·ªù c√≥ ch·ª©c nƒÉng n√†y l√† editor tƒÉng life quality l√™n r·∫•t l√† nhi·ªÅu ƒë√≥ üòâ**
 *
 * @param event S·ª± ki·ªán b√†n ph√≠m (KeyboardEvent) khi nh·∫•n ph√≠m Backspace.
 * @param editor ƒê·ªëi t∆∞·ª£ng Editor c·ªßa Slate.
 * @param selection V·ªã tr√≠ selection hi·ªán t·∫°i trong editor.
 */
function handleBackspaceMergeToPreviousBlock(
  editor: Editor,
  selection: BaseSelection
): boolean {
  if (!selection || !Range.isCollapsed(selection)) {
    return false;
  }

  // Ki·ªÉm tra n·∫øu block hi·ªán t·∫°i l√† paragraph & r·ªóng
  const nodeEntry = Editor.above(editor, {
    match: (n) => Element.isElement(n) && Editor.isBlock(editor, n),
  }) as NodeEntry | undefined;

  if (!nodeEntry) {
    return false;
  }

  const [currentBlock, currentPath] = nodeEntry;

  // Ch·ªâ x·ª≠ l√Ω n·∫øu con tr·ªè ƒëang ·ªü ƒë·∫ßu block
  const isStart = Editor.isStart(editor, selection?.anchor, currentPath);
  if (!isStart) {
    return false;
  }

  // T√¨m block ph√≠a tr∆∞·ªõc
  try {
    const prevPath = Path.previous(currentPath);
    const prevBlock = Node.get(editor, prevPath) as Element | undefined;

    if (
      !prevBlock ||
      Node.string(prevBlock).length !== 0 ||
      prevBlock.type === "divider"
    ) {
      return false;
    }

    // Th·ª±c hi·ªán logic merge block
    const text = Node.string(currentBlock); // L·∫•y text trong block hi·ªán t·∫°i
    Transforms.removeNodes(editor, { at: currentPath }); // Xo√° block hi·ªán t·∫°i
    Transforms.insertText(editor, text, { at: Editor.end(editor, prevPath) }); // Ch√®n text ƒë√≥ v√†o block r·ªóng

    // ƒê·∫∑t l·∫°i selection v·ªÅ block ph√≠a tr√™n
    const newPoint = Editor.start(editor, prevPath);
    Transforms.select(editor, newPoint);
    return true;
  } catch {
    console.log("Hihi, c√≤n c√°i ·ªü tr√™n ƒë√¢u m√† ƒë√≤i xo√° z tr√≤i?");
    return false;
  }
}
